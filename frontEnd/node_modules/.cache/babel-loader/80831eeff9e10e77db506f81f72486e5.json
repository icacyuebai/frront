{"remainingRequest":"/Users/movi/Desktop/current/frontEnd/node_modules/thread-loader/dist/cjs.js!/Users/movi/Desktop/current/frontEnd/node_modules/babel-loader/lib/index.js!/Users/movi/Desktop/current/frontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/movi/Desktop/current/frontEnd/src/views/dashboard/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/movi/Desktop/current/frontEnd/src/views/dashboard/index.vue","mtime":1679992830000},{"path":"/Users/movi/Desktop/current/frontEnd/babel.config.js","mtime":1679456648000},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1651221196058},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/thread-loader/dist/cjs.js","mtime":1646811141074},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/babel-loader/lib/index.js","mtime":1669512949620},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1651221196058},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/index.js","mtime":1669512954316}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/movi/Desktop/current/frontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js\";\nimport { reqUserList, userDelete, userUpdate, userAdd } from '@/api/user';\nimport md5 from 'md5';\nimport { notification } from 'ant-design-vue';\nvar columns = [{\n  title: 'id',\n  dataIndex: 'id',\n  key: 'id',\n  show: false\n}, {\n  title: '用户名',\n  key: 'login_name',\n  dataIndex: 'login_name'\n}, {\n  title: '姓名',\n  key: 'name',\n  dataIndex: 'name'\n},\n// {\n//   title: '角色',\n//   key: 'role_type',\n//   dataIndex: 'role_type'\n// },\n{\n  title: '操作',\n  key: 'action',\n  scopedSlots: {\n    customRender: 'action'\n  }\n}];\nexport default {\n  name: 'Dashboard',\n  data: function data() {\n    return {\n      data: null,\n      columns: columns,\n      page_num: 1,\n      page_size: 10,\n      total: 0,\n      // 创建、修改\n      createUserModal: false,\n      confirmLoading: false,\n      type: '',\n      isChangePassword: false,\n      form: this.$form.createForm(this, {\n        id: null,\n        login_name: null,\n        name: null,\n        role_type: '普通用户',\n        password: null,\n        confirm_password: null\n      })\n    };\n  },\n  methods: {\n    compareToFirstPassword: function compareToFirstPassword(rule, value, callback) {\n      var form = this.form;\n      if (value && value !== form.getFieldValue('password')) {\n        callback('两次密码不同，请重新输入!');\n      } else {\n        callback();\n      }\n    },\n    handlePageChange: function () {\n      var _handlePageChange = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(page_num, page_size) {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return reqUserList({\n                page_num: page_num,\n                page_size: page_size\n              });\n            case 2:\n              res = _context.sent;\n              this.data = res.result.users;\n              this.total = res.result.count;\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function handlePageChange(_x, _x2) {\n        return _handlePageChange.apply(this, arguments);\n      }\n      return handlePageChange;\n    }(),\n    closeModal: function closeModal() {\n      this.createUserModal = false;\n      this.isChangePassword = false;\n      this.form = this.$form.createForm(this, {\n        id: null,\n        login_name: null,\n        name: null,\n        role_type: '普通用户',\n        password: null,\n        confirm_password: null\n      });\n    },\n    showCreateUserModal: function showCreateUserModal() {\n      this.createUserModal = true;\n      this.type = 'create';\n      this.form = this.$form.createForm(this, {\n        id: null,\n        login_name: null,\n        name: null,\n        role_type: '普通用户',\n        password: null,\n        confirm_password: null\n      });\n    },\n    showUpdateUserModal: function showUpdateUserModal(record) {\n      this.createUserModal = true;\n      this.type = 'update';\n      this.isChangePassword = false;\n      this.form = this.$form.createForm(this, {\n        props: {\n          id: Number,\n          login_name: record.login_name,\n          name: record.name,\n          role_type: '普通用户',\n          password: null,\n          confirm_password: null\n        }\n      });\n      var that = this;\n      this.$nextTick(function () {\n        that.form.setFieldsValue({\n          id: record.id,\n          login_name: record.login_name,\n          name: record.name\n        });\n      });\n    },\n    getTableData: function () {\n      var _getTableData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return reqUserList({\n                page_num: 1,\n                page_size: 10\n              });\n            case 2:\n              res = _context2.sent;\n              this.data = res.result.users;\n              this.total = res.result.count;\n              this.page_num = res.result.page_num;\n              this.page_size = res.result.page_size;\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getTableData() {\n        return _getTableData.apply(this, arguments);\n      }\n      return getTableData;\n    }(),\n    submitForm: function submitForm() {\n      var _this = this;\n      this.form.validateFields( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(err, values) {\n          var res, success, error;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                if (err) {\n                  _context3.next = 17;\n                  break;\n                }\n                console.log(values);\n                if (values.password) {\n                  values.password = md5(values.password);\n                }\n                if (!(_this.type === 'create')) {\n                  _context3.next = 11;\n                  break;\n                }\n                _context3.next = 6;\n                return userAdd(values);\n              case 6:\n                res = _context3.sent;\n                success = '创建成功';\n                error = '创建失败';\n                _context3.next = 16;\n                break;\n              case 11:\n                _context3.next = 13;\n                return userUpdate(values);\n              case 13:\n                res = _context3.sent;\n                success = '更新成功';\n                error = '更新失败';\n              case 16:\n                if (res.code === 200) {\n                  notification['success']({\n                    message: success\n                  });\n                  _this.getTableData();\n                  _this.closeModal();\n                } else {\n                  notification['error']({\n                    message: error\n                  });\n                }\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3);\n        }));\n        return function (_x3, _x4) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    deleteUser: function deleteUser(id) {\n      var that = this;\n      this.$confirm({\n        title: '确定要删除该用户吗?',\n        okText: '确定',\n        okType: 'danger',\n        cancelText: '取消',\n        onOk: function () {\n          var _onOk = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n            var res, _res;\n            return regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return userDelete({\n                    id: id\n                  });\n                case 2:\n                  res = _context4.sent;\n                  if (!(res.code === 200)) {\n                    _context4.next = 12;\n                    break;\n                  }\n                  that.$notification.open({\n                    message: '删除成功',\n                    duration: 1\n                  });\n                  // this.getTableData()\n                  // this.closeDialog()\n                  _context4.next = 7;\n                  return reqUserList({\n                    page_num: 1,\n                    page_size: 10\n                  });\n                case 7:\n                  _res = _context4.sent;\n                  that.data = _res.result.users;\n                  that.total = _res.result.count;\n                  that.page_num = _res.result.page_num;\n                  that.page_size = _res.result.page_size;\n                case 12:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }, _callee4);\n          }));\n          function onOk() {\n            return _onOk.apply(this, arguments);\n          }\n          return onOk;\n        }(),\n        onCancel: function onCancel() {\n          console.log('Cancel');\n        }\n      });\n    }\n  },\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n      var res;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return reqUserList({\n              page_num: 1,\n              page_size: 10\n            });\n          case 2:\n            res = _context5.sent;\n            this.data = res.result.users;\n            this.total = res.result.count;\n            this.page_num = res.result.page_num;\n            this.page_size = res.result.page_size;\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5, this);\n    }));\n    function created() {\n      return _created.apply(this, arguments);\n    }\n    return created;\n  }()\n};",null]}