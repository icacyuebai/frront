{"remainingRequest":"/Users/movi/Desktop/current/frontEnd/node_modules/babel-loader/lib/index.js!/Users/movi/Desktop/current/frontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/movi/Desktop/current/frontEnd/src/components/Ellipsis/Ellipsis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/movi/Desktop/current/frontEnd/src/components/Ellipsis/Ellipsis.vue","mtime":1679456648000},{"path":"/Users/movi/Desktop/current/frontEnd/babel.config.js","mtime":1679456648000},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1651221196058},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/babel-loader/lib/index.js","mtime":1669512949620},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1651221196058},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/index.js","mtime":1669512954316}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport Tooltip from 'ant-design-vue/es/tooltip';\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/util';\n/*\n    const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n    const TooltipOverlayStyle = {\n      overflowWrap: 'break-word',\n      wordWrap: 'break-word',\n    };\n  */\n\nexport default {\n  name: 'Ellipsis',\n  components: {\n    Tooltip: Tooltip\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-ellipsis'\n    },\n    tooltip: {\n      type: Boolean\n    },\n    length: {\n      type: Number,\n      required: true\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    fullWidthRecognition: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    getStrDom: function getStrDom(str, fullLength) {\n      var h = this.$createElement;\n      return h(\"span\", [cutStrByFullLength(str, this.length) + (fullLength > this.length ? '...' : '')]);\n    },\n    getTooltip: function getTooltip(fullStr, fullLength) {\n      var h = this.$createElement;\n      return h(Tooltip, [h(\"template\", {\n        \"slot\": \"title\"\n      }, [fullStr]), this.getStrDom(fullStr, fullLength)]);\n    }\n  },\n  render: function render() {\n    var _this$$props = this.$props,\n      tooltip = _this$$props.tooltip,\n      length = _this$$props.length;\n    var str = this.$slots.default.map(function (vNode) {\n      return vNode.text;\n    }).join('');\n    var fullLength = getStrFullLength(str);\n    var strDom = tooltip && fullLength > length ? this.getTooltip(str, fullLength) : this.getStrDom(str, fullLength);\n    return strDom;\n  }\n};",{"version":3,"names":["Tooltip","cutStrByFullLength","getStrFullLength","name","components","props","prefixCls","type","String","default","tooltip","Boolean","length","Number","required","lines","fullWidthRecognition","methods","getStrDom","str","fullLength","h","$createElement","getTooltip","fullStr","render","_this$$props","$props","$slots","map","vNode","text","join","strDom"],"sources":["src/components/Ellipsis/Ellipsis.vue"],"sourcesContent":["<script>\nimport Tooltip from 'ant-design-vue/es/tooltip'\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/util'\n/*\n    const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n    const TooltipOverlayStyle = {\n      overflowWrap: 'break-word',\n      wordWrap: 'break-word',\n    };\n  */\n\nexport default {\n  name: 'Ellipsis',\n  components: {\n    Tooltip\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-ellipsis'\n    },\n    tooltip: {\n      type: Boolean\n    },\n    length: {\n      type: Number,\n      required: true\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    fullWidthRecognition: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    getStrDom (str, fullLength) {\n      return (\n        <span>{ cutStrByFullLength(str, this.length) + (fullLength > this.length ? '...' : '') }</span>\n      )\n    },\n    getTooltip (fullStr, fullLength) {\n      return (\n        <Tooltip>\n          <template slot=\"title\">{ fullStr }</template>\n          { this.getStrDom(fullStr, fullLength) }\n        </Tooltip>\n      )\n    }\n  },\n  render () {\n    const { tooltip, length } = this.$props\n    const str = this.$slots.default.map(vNode => vNode.text).join('')\n    const fullLength = getStrFullLength(str)\n    const strDom = tooltip && fullLength > length ? this.getTooltip(str, fullLength) : this.getStrDom(str, fullLength)\n    return (\n      strDom\n    )\n  }\n}\n</script>\n"],"mappings":";AACA,OAAAA,OAAA;AACA,SAAAC,kBAAA,EAAAC,gBAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;EACAC,IAAA;EACAC,UAAA;IACAJ,OAAA,EAAAA;EACA;EACAK,KAAA;IACAC,SAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACAC,OAAA;MACAH,IAAA,EAAAI;IACA;IACAC,MAAA;MACAL,IAAA,EAAAM,MAAA;MACAC,QAAA;IACA;IACAC,KAAA;MACAR,IAAA,EAAAM,MAAA;MACAJ,OAAA;IACA;IACAO,oBAAA;MACAT,IAAA,EAAAI,OAAA;MACAF,OAAA;IACA;EACA;EACAQ,OAAA;IACAC,SAAA,WAAAA,UAAAC,GAAA,EAAAC,UAAA;MAAA,IAAAC,CAAA,QAAAC,cAAA;MACA,OAAAD,CAAA,UACApB,kBAAA,CAAAkB,GAAA,OAAAP,MAAA,KAAAQ,UAAA,QAAAR,MAAA;IAEA;IACAW,UAAA,WAAAA,WAAAC,OAAA,EAAAJ,UAAA;MAAA,IAAAC,CAAA,QAAAC,cAAA;MACA,OAAAD,CAAA,CAAArB,OAAA,GAAAqB,CAAA;QAAA,QAEA;MAAA,IAAAG,OAAA,IACA,KAAAN,SAAA,CAAAM,OAAA,EAAAJ,UAAA;IAGA;EACA;EACAK,MAAA,WAAAA,OAAA;IACA,IAAAC,YAAA,QAAAC,MAAA;MAAAjB,OAAA,GAAAgB,YAAA,CAAAhB,OAAA;MAAAE,MAAA,GAAAc,YAAA,CAAAd,MAAA;IACA,IAAAO,GAAA,QAAAS,MAAA,CAAAnB,OAAA,CAAAoB,GAAA,WAAAC,KAAA;MAAA,OAAAA,KAAA,CAAAC,IAAA;IAAA,GAAAC,IAAA;IACA,IAAAZ,UAAA,GAAAlB,gBAAA,CAAAiB,GAAA;IACA,IAAAc,MAAA,GAAAvB,OAAA,IAAAU,UAAA,GAAAR,MAAA,QAAAW,UAAA,CAAAJ,GAAA,EAAAC,UAAA,SAAAF,SAAA,CAAAC,GAAA,EAAAC,UAAA;IACA,OACAa,MAAA;EAEA;AACA"}]}