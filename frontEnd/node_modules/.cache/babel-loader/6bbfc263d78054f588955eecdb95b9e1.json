{"remainingRequest":"/Users/movi/Desktop/current/frontEnd/node_modules/thread-loader/dist/cjs.js!/Users/movi/Desktop/current/frontEnd/node_modules/babel-loader/lib/index.js!/Users/movi/Desktop/current/frontEnd/src/utils/request.js","dependencies":[{"path":"/Users/movi/Desktop/current/frontEnd/src/utils/request.js","mtime":1679890316000},{"path":"/Users/movi/Desktop/current/frontEnd/babel.config.js","mtime":1679456648000},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1651221196058},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/thread-loader/dist/cjs.js","mtime":1646811141074},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/babel-loader/lib/index.js","mtime":1669512949620}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport axios from 'axios';\nimport store from '@/store';\nimport notification from 'ant-design-vue/es/notification';\nimport { VueAxios } from \"./axios\";\nimport { ACCESS_TOKEN } from '@/store/mutation-types';\n\n// 创建 axios 实例\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL,\n  // api base_url\n  timeout: 6000 // 请求超时时间\n});\n\nvar err = function err(error) {\n  if (error.response) {\n    var data = error.response.data;\n    var token = Vue.ls.get(ACCESS_TOKEN);\n    if (error.response.status === 403) {\n      notification.error({\n        message: 'Forbidden',\n        description: data.message\n      });\n    }\n    if (error.response.status === 401 && !(data.result && data.result.isLogin)) {\n      notification.error({\n        message: 'Unauthorized',\n        description: 'Authorization verification failed'\n      });\n      if (token) {\n        store.dispatch('Logout').then(function () {\n          setTimeout(function () {\n            window.location.reload();\n          }, 1500);\n        });\n      }\n    }\n  }\n  return Promise.reject(error);\n};\n\n// request interceptor\nservice.interceptors.request.use(function (config) {\n  var token = Vue.ls.get(ACCESS_TOKEN);\n  if (token) {\n    config.headers['Access-Token'] = token; // 让每个请求携带自定义 token 请根据实际情况自行修改\n  }\n\n  return config;\n}, err);\n\n// response interceptor\nservice.interceptors.response.use(function (response) {\n  if (response.data.message === \"授权失败\") {\n    var token = Vue.ls.get(ACCESS_TOKEN);\n    if (token) {\n      store.dispatch('Logout').then(function () {\n        notification.error({\n          message: '授权失败，请重新登录！',\n          description: 'Authorization verification failed'\n        });\n        setTimeout(function () {\n          window.location.reload();\n        }, 1500);\n      });\n    }\n  }\n  return response.data;\n}, err);\nvar installer = {\n  vm: {},\n  install: function install(Vue) {\n    Vue.use(VueAxios, service);\n  }\n};\nexport { installer as VueAxios, service as axios };",null]}