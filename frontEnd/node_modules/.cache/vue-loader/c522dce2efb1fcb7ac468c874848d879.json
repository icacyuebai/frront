{"remainingRequest":"/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/movi/Desktop/current/frontEnd/src/views/dashboard/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/movi/Desktop/current/frontEnd/src/views/dashboard/index.vue","mtime":1679992830000},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/babel-loader/lib/index.js","mtime":1669512949620},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1651221196058},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/index.js","mtime":1669512954316}],"contextDependencies":[],"result":["\nimport { reqUserList, userDelete, userUpdate, userAdd } from '@/api/user'\nimport md5 from 'md5'\nimport { notification } from 'ant-design-vue'\n\nconst columns = [\n  {\n    title: 'id',\n    dataIndex: 'id',\n    key: 'id',\n    show: false\n  },\n  {\n    title: '用户名',\n    key: 'login_name',\n    dataIndex: 'login_name'\n  },\n  {\n    title: '姓名',\n    key: 'name',\n    dataIndex: 'name'\n  },\n  // {\n  //   title: '角色',\n  //   key: 'role_type',\n  //   dataIndex: 'role_type'\n  // },\n  {\n    title: '操作',\n    key: 'action',\n    scopedSlots: { customRender: 'action' }\n  }\n]\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      data: null,\n      columns,\n      page_num: 1,\n      page_size: 10,\n      total: 0,\n      // 创建、修改\n      createUserModal: false,\n      confirmLoading: false,\n      type: '',\n      isChangePassword: false,\n      form: this.$form.createForm(this, {\n        id: null,\n        login_name: null,\n        name: null,\n        role_type: '普通用户',\n        password: null,\n        confirm_password: null\n      })\n    }\n  },\n  methods: {\n    compareToFirstPassword(rule, value, callback) {\n      const form = this.form\n      if (value && value !== form.getFieldValue('password')) {\n        callback('两次密码不同，请重新输入!')\n      } else {\n        callback()\n      }\n    },\n    async handlePageChange(page_num, page_size) {\n      let res = await reqUserList({ page_num: page_num, page_size: page_size })\n      this.data = res.result.users\n      this.total = res.result.count\n    },\n    closeModal() {\n      this.createUserModal = false\n      this.isChangePassword = false\n      this.form = this.$form.createForm(this, {\n        id: null,\n        login_name: null,\n        name: null,\n        role_type: '普通用户',\n        password: null,\n        confirm_password: null\n      })\n    },\n    showCreateUserModal() {\n      this.createUserModal = true\n      this.type = 'create'\n      this.form = this.$form.createForm(this, {\n        id: null,\n        login_name: null,\n        name: null,\n        role_type: '普通用户',\n        password: null,\n        confirm_password: null\n      })\n    },\n    showUpdateUserModal(record) {\n      this.createUserModal = true\n      this.type = 'update'\n      this.isChangePassword = false\n      this.form = this.$form.createForm(this, {\n        props: {\n          id: Number,\n          login_name: record.login_name,\n          name: record.name,\n          role_type: '普通用户',\n          password: null,\n          confirm_password: null\n        }\n      })\n      const that = this\n      this.$nextTick(() => {\n        that.form.setFieldsValue({\n          id: record.id,\n          login_name: record.login_name,\n          name: record.name\n        })\n      })\n    },\n    async getTableData() {\n      let res = await reqUserList({ page_num: 1, page_size: 10 })\n      this.data = res.result.users\n      this.total = res.result.count\n      this.page_num = res.result.page_num\n      this.page_size = res.result.page_size\n    },\n    submitForm() {\n      this.form.validateFields(async (err, values) => {\n        if (!err) {\n          console.log(values)\n          let res\n          let success\n          let error\n          if (values.password) {\n            values.password = md5(values.password)\n          }\n          if (this.type === 'create') {\n            res = await userAdd(values)\n            success = '创建成功'\n            error = '创建失败'\n          } else {\n            res = await userUpdate(values)\n            success = '更新成功'\n            error = '更新失败'\n          }\n          if (res.code === 200) {\n            notification['success']({\n              message: success\n            })\n            this.getTableData()\n            this.closeModal()\n          } else {\n            notification['error']({\n              message: error\n            })\n          }\n        }\n      })\n    },\n    deleteUser(id) {\n      const that = this\n      this.$confirm({\n        title: '确定要删除该用户吗?',\n        okText: '确定',\n        okType: 'danger',\n        cancelText: '取消',\n        async onOk() {\n          let res = await userDelete({ id: id })\n          if (res.code === 200) {\n            that.$notification.open({\n              message: '删除成功',\n              duration: 1\n            })\n            // this.getTableData()\n            // this.closeDialog()\n            let res = await reqUserList({ page_num: 1, page_size: 10 })\n            that.data = res.result.users\n            that.total = res.result.count\n            that.page_num = res.result.page_num\n            that.page_size = res.result.page_size\n          }\n        },\n        onCancel() {\n          console.log('Cancel')\n        }\n      })\n\n    }\n  },\n  async created() {\n    let res = await reqUserList({ page_num: 1, page_size: 10 })\n    this.data = res.result.users\n    this.total = res.result.count\n    this.page_num = res.result.page_num\n    this.page_size = res.result.page_size\n  }\n}\n",null]}