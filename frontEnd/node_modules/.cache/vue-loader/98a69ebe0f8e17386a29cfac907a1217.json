{"remainingRequest":"/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/movi/Desktop/current/frontEnd/src/views/event/index.vue?vue&type=style&index=0&id=62ef0e73&lang=less&scoped=true&","dependencies":[{"path":"/Users/movi/Desktop/current/frontEnd/src/views/event/index.vue","mtime":1682075162906},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/css-loader/index.js","mtime":1647252042634},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1669512954316},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/postcss-loader/src/index.js","mtime":1646811147338},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/less-loader/dist/cjs.js","mtime":1679456769169},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1651221196058},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/index.js","mtime":1669512954316}],"contextDependencies":[],"result":["\n\n.body-eventDetail{\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  background-color: #f0f2f5;\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;AAyjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/event","sourcesContent":["<template>\n  <div :class='[$route.name === \"EventDetail\" ? \"body-eventDetail\" : \"body-event\"]'>\n    <template v-if='$route.name === \"Event\"'>\n    <div class='search-term'>\n      <a-select\n        ref=\"select\"\n        v-model:value=\"type\"\n        placeholder=\"事故类型\"\n        :allowClear='true'\n        style=\"width: 120px;margin-right: 20px\"\n      >\n        <a-select-option value=\"中毒窒息\">中毒窒息</a-select-option>\n        <a-select-option value=\"压力容器\">压力容器</a-select-option>\n        <a-select-option value=\"坍塌事故\">坍塌事故</a-select-option>\n        <a-select-option value=\"机械伤害\">机械伤害</a-select-option>\n        <a-select-option value=\"淹溺事故\">淹溺事故</a-select-option>\n        <a-select-option value=\"火灾事故\">火灾事故</a-select-option>\n        <a-select-option value=\"灼烫事故\">灼烫事故</a-select-option>\n        <a-select-option value=\"爆炸事故\">爆炸事故</a-select-option>\n        <a-select-option value=\"物体打击\">物体打击</a-select-option>\n        <a-select-option value=\"矿山事故\">矿山事故</a-select-option>\n        <a-select-option value=\"空难事故\">空难事故</a-select-option>\n        <a-select-option value=\"起重事故\">起重事故</a-select-option>\n        <a-select-option value=\"起重伤害\">起重伤害</a-select-option>\n        <a-select-option value=\"车辆伤害\">车辆伤害</a-select-option>\n        <a-select-option value=\"锅炉事故\">锅炉事故</a-select-option>\n        <a-select-option value=\"高处坠落\">高处坠落</a-select-option>\n      </a-select>\n      <a-button @click='getTableData'>查询</a-button>\n      <a-button v-if='roleType===\"admin\"' class='right' @click='batchBind'>批量分配</a-button>\n      <a-button v-if='roleType===\"admin\"' class='right' @click='showUploadModal(\"eventCOunt\")'>事件抽取批量上传</a-button>\n      <a-button v-if='roleType===\"admin\"' class=\"right\" @click='showUploadModal(\"event\")' style='margin-right: 10px'>事件批量上传</a-button>\n      <a-button v-if='roleType===\"admin\"' class='right' @click='updateJsonModalVisible = true' style='margin-right: 10px'>图谱批量上传</a-button>\n    </div>\n    <a-table\n      :row-selection=\"{ selectedRowKeys: selectedRowKeys, onChange: onSelectChange }\"\n      :columns=\"columns\" :data-source=\"data\" :pagination=\"false\" >\n      <a slot=\"name\" slot-scope=\"text\">{{ text }}</a>\n      <span slot=\"action\" slot-scope=\"record\">\n        <a-button @click='detail(record.name)' type='link'>详情</a-button>\n        <a-divider type=\"vertical\" />\n        <a-button v-if='roleType===\"admin\"' @click='bindUsers(record.name)' type='link'>分配</a-button>\n<!--        <a-divider type=\"vertical\" />-->\n<!--        <a-button v-else @click='viewJson(record)' :disabled='!record.json' type='link'>查看图谱</a-button>-->\n        <a-divider type=\"vertical\" />\n        <a-button @click='updateEvent(record)' type='link'>修改</a-button>\n        <a-divider type=\"vertical\" />\n        <a-button v-if='roleType===\"admin\"' @click=\"deleteEvent(record.id)\" type='link'>删除</a-button>\n      </span>\n    </a-table>\n    <a-pagination\n      style='margin-top: 20px;float: right'\n      :default-current=\"page_num\"\n      :total=\"total\"\n      @change=\"handlePageChange\" />\n    <a-modal\n      :title=\"updateType==='event' ? '上传事件文件' : '上传事件抽取文件'\"\n      v-model:visible=\"uploadModalVisible\"\n      :confirm-loading=\"confirmLoading\"\n      @ok=\"handleOk\"\n    >\n      <a-upload\n        v-model:file-list=\"fileList\"\n        name=\"file\"\n        :multiple=\"true\"\n        :action=\"updateType==='event' ? '/api/event/upload' : '/api/eventCount/upload'\"\n        @change=\"handleChange\"\n      >\n        <a-button>\n          <upload-outlined></upload-outlined>\n          选择文件\n        </a-button>\n      </a-upload>\n    </a-modal>\n\n    <a-modal v-model:visible=\"updateModalVisible\" title=\"修改事件\" width='50%'>\n      <template #footer>\n        <a-button key=\"back\" @click=\"closeModal\">取消</a-button>\n        <a-button key=\"submit\" type=\"primary\" :loading=\"confirmLoading\" @click=\"submitForm\">提交</a-button>\n      </template>\n      <a-form :model=\"form\">\n        <a-form-item label=\"主题\">\n          <a-input v-model=\"form.name\" :disabled='true'/>\n        </a-form-item>\n        <a-form-item label=\"简介\">\n          <a-input type='textarea' v-model='form.introduction'></a-input>\n        </a-form-item>\n        <a-form-item label=\"过程\">\n          <a-input type='textarea' v-model='form.process'></a-input>\n        </a-form-item>\n        <a-form-item label='url'>\n          <a-input v-model='form.url'></a-input>\n        </a-form-item>\n        <a-form-item label='类型'>\n          <a-input v-model='form.type' :disable=\"true\"></a-input>\n        </a-form-item>\n      </a-form>\n    </a-modal>\n\n    <a-modal v-model:visible=\"bindModalVisible\" title=\"分配事件\" width='30%' height='60vh'>\n      <template #footer>\n        <a-button key=\"back\" @click=\"closeModal\">取消</a-button>\n        <a-button key=\"submit\" type=\"primary\" :loading=\"confirmLoading\" @click=\"submitBindForm\">提交</a-button>\n      </template>\n      <div style='height: 54vh;overflow: scroll'>\n        <a-checkbox-group v-model='userIDList'>\n          <a-checkbox style='display: block;margin-left: 8px;margin-top:12px' v-for='(item, index) in userList' :value='item.id'>{{item.name}}</a-checkbox>\n        </a-checkbox-group>\n      </div>\n    </a-modal>\n\n    <a-modal v-model:visible=\"updateJsonModalVisible\" title=\"上传json\" width='30%' height='60vh'>\n      <template #footer>\n        <a-button key=\"back\" @click=\"closeModal\">取消</a-button>\n        <a-button\n          key=\"submit\"\n          type=\"primary\"\n          :loading=\"confirmLoading\"\n          @click=\"submitUpdateJson\"\n        >提交</a-button>\n      </template>\n      <a-upload :file-list=\"fileList\" :multiple='true' :remove=\"handleRemove\" :before-upload=\"convertJsonToEchartData\">\n        <a-button>\n          选择文件\n        </a-button>\n      </a-upload>\n    </a-modal>\n\n    </template>\n    <keep-alive v-else>\n      <router-view key='eventDetail'></router-view>\n    </keep-alive>\n  </div>\n</template>\n<script>\nimport { reqEvent, deleteEvent, updateEvent, bindEvent, bindedUserIDList, updateJson } from '@/api/event.js'\nimport { reqUserList } from '@/api/user'\nimport { mapGetters } from 'vuex'\nimport { notification } from 'ant-design-vue';\nimport * as echarts from \"echarts\"\nexport default {\n  name: 'Event',\n  data() {\n    return {\n      data: null,\n      selectedRowKeys: [], // Check here to configure the default column\n      columns: [\n        {\n          title: 'id',\n          dataIndex: 'id',\n          key: 'id',\n          width: '80px'\n        },\n        // {\n        //   title: '简介',\n        //   key:'introduction',\n        //   dataIndex: 'introduction',\n        //   ellipsis:true\n        // },\n        {\n          title: '主题',\n          key:'name',\n          dataIndex: 'name',\n          ellipsis:true,\n          width: '80'\n        },\n        // {\n        //   title: '发生经过',\n        //   key:'process',\n        //   dataIndex: 'process',\n        //   ellipsis:true\n        // },\n        {\n          title: '类型',\n          key:'type',\n          dataIndex: 'type',\n          width: '90px'\n        },\n        // {\n        //   title: 'url',\n        //   key:'url',\n        //   dataIndex: 'url'\n        // },\n        {\n          title: '操作',\n          key: 'action',\n          scopedSlots: { customRender: 'action' },\n          width: '220'\n        },\n      ],\n      page_num:1,\n      page_size:10,\n      total:0,\n      type: null,\n      // 文件上传\n      updateType: \"\",\n      uploadModalVisible: false,\n      confirmLoading: false,\n      file: null,\n      fileList: [],\n      // 上传json\n      updateJsonModalVisible:false,\n      json: null,\n      jsons: [],\n      // 展示json\n      viewJsonModalVisible: false,\n      myChart: null,\n      jsonData: null,\n      nodeForm: null,\n      nodeIndex: null,\n      nodeModalVisible: false,\n      // 分配\n      bindModalVisible: false,\n      userIDList: [],\n      userList:[],\n      toBindEventName: \"\",\n      // 更新\n      updateModalVisible: false,\n      form: {\n        name: \"\",\n        introduction: \"\",\n        url: \"\",\n        process: \"\",\n        type: \"\"\n      },\n    };\n  },\n  computed:{\n    ...mapGetters(['roleType']),\n  },\n  methods:{\n    initEchart() {\n      if(!this.myChart){\n        let dom = document.getElementById(\"echarts\");\n        this.myChart = echarts.init(dom);\n      }\n      var option;\n      option = {\n        tooltip: {\n          formatter: function(params) {\n            let data = params.data\n            let html = '<div style=\"width:280px;height:180px;background:#5370c6;border:1px solid rgba(7,166,255,0.7)\">'\n              +'<div style=\"width:100%;min-height:22px;line-height:22px;border-bottom:2px solid rgba(7,166,255,0.7);padding:0 20px\">'\n              +'<span style=\"color:#fff;font-size:14px;word-wrap:break-word;white-space:normal;\">'+params.name+'</span>'+'</div>'\n              +'<div style=\"padding:20px\">'\n            for(let key in data){\n              if([\"name\", \"x\", \"y\"].indexOf(key) === -1){\n                html+=`<p style=\"color:#fff;font-size:12px;\">\n                        ${key}: ${data[key]}</span>\n                       </p>`\n              }\n            }\n            html += '</div>'+'</div>';\n            return html;\n          }\n        },\n        animationDurationUpdate: 1500,\n        animationEasingUpdate: \"quinticInOut\",\n        series: [\n          {\n            type: \"graph\",\n            layout: \"none\",\n            symbolSize: 50,\n            roam: true,\n            label: {\n              formatter: '{b}',\n              show: true,\n            },\n            edgeSymbol: [\"circle\", \"arrow\"],\n            edgeSymbolSize: [4, 10],\n            edgeLabel: {\n              fontSize: 20,\n            },\n            data: this.json.dict_ls,\n            links: this.json.links,\n            lineStyle: {\n              opacity: 0.9,\n              width: 2,\n              curveness: 0,\n            },\n          },\n        ],\n      };\n      option && this.myChart.setOption(option);\n      const that = this\n      this.myChart.on('click', function (params) {\n        let data = params.data\n        // 如果除了name,x,y外无其他的key，则不弹窗\n        if(params.data && Object.keys(data).length>3){\n          that.nodeModalVisible = true\n          that.nodeForm = data\n          that.nodeIndex = params.dataIndex\n        }\n      });\n    },\n    async handlePageChange(page_num, page_size) {\n      let res = await reqEvent({ page_num: page_num, page_size: page_size })\n      this.data = res.result.events\n      this.total = res.result.count\n    },\n    async handleEventChange(page_num,page_size){\n      let res = await reqEvent({page_num:page_num,page_size:page_size})\n      this.data = res.result.events\n      this.total = res.result.count\n    },\n    showUploadModal(type){\n      this.updateType = type\n      this.uploadModalVisible = true\n    },\n    onSelectChange(selectedRowKeys) {\n      this.selectedRowKeys = selectedRowKeys;\n    },\n    closeModal(){\n      this.form = {\n        name: \"\",\n        introduction: \"\",\n        url: \"\",\n        process: \"\",\n        type: \"\"\n      }\n      this.toBindEventName = \"\"\n      this.userIDList = []\n      this.bindModalVisible = false\n      this.updateModalVisible = false\n      this.updateJsonModalVisible = false\n      this.json = null\n      this.jsons = []\n      this.selectedRowKeys = []\n      this.fileList = []\n      this.getTableData()\n    },\n    async submitUpdateJson(){\n      let res = await updateJson({jsons: this.jsons})\n      if(res.code === 200){\n        notification[\"success\"]({\n          message: '更新成功',\n        });\n        this.closeModal()\n      }\n    },\n    detail(name){\n      this.$router.push({path: \"/event/eventDetail\", query: {name: name}})\n    },\n    handleRemove(file){\n      const index = this.fileList.indexOf(file);\n      const newFileList = this.fileList.slice();\n      newFileList.splice(index, 1);\n      this.fileList = newFileList;\n    },\n    convertJsonToEchartData(file){\n      this.fileList = [...this.fileList, file];\n      const that = this\n      for(let i = 0; i < this.fileList.length; i++){\n        let f = this.fileList[i]\n        let reader = new FileReader()\n        reader.readAsText(f, \"UTF-8\")\n        reader.onload = _ =>{\n          let json = JSON.parse(reader.result)\n          let jsonFileName = f.name;\n\n          // 每次增加的步长\n          let stepX = 40;\n          let stepY = 40;\n          let positionDict = {};\n          let dict_ls = [];\n          let zeroPointPostionx = 100;\n          let zeroPointPostiony = 100;\n\n          let x = 0;\n          let y = 0;\n\n          dict_ls.push({ name: jsonFileName, x: x, y: y });\n\n          // 关系列表\n          let links = [];\n\n          // 子分支列表存放\n          let next_ls = [];\n\n          // 存放第一层分支的数量\n          let fatherNum = 0;\n          for (let name in json) {\n            let dict = {};\n            dict[\"name\"] = name;\n\n            // 是否是第一层分支\n            if (next_ls.indexOf(name) === -1) {\n              fatherNum++;\n              if(fatherNum%2 == 0){\n                x = zeroPointPostionx - stepX;\n                y = zeroPointPostiony - stepY * fatherNum;\n                dict[\"x\"] = x;\n                dict[\"y\"] = y;\n              }else{\n                x = zeroPointPostionx - stepX;\n                y = zeroPointPostiony - stepY * fatherNum;\n                dict[\"x\"] = x;\n                dict[\"y\"] = y;\n              }\n\n              positionDict[name] = { x:-2*x, y: y };\n              links.push({\n                target: name,\n                source: jsonFileName,\n              });\n            } else {\n              dict[\"x\"] = positionDict[name].x;\n              dict[\"y\"] = positionDict[name].y;\n            }\n\n            let sonNum = 0;\n            for (let val in json[name]) {\n              let key = json[name][val];\n              let links_item = {};\n              if (key[0] === \"next\") {\n                sonNum = sonNum + 1;\n                next_ls.push(val);\n                let x = positionDict[name].x + stepX;\n                let y = positionDict[name].y + stepY * sonNum;\n                positionDict[val] = { x: x, y: y };\n                links_item[\"target\"] = val;\n                links_item[\"source\"] = name;\n                links.push(links_item);\n              } else {\n                dict[key] = val;\n              }\n            }\n            dict_ls.push(dict);\n          }\n          that.jsons.push({\n            name: jsonFileName,\n            json: JSON.stringify({\n              dict_ls: dict_ls,\n              links: links\n            })\n          })\n        }\n      }\n      return false;\n    },\n    handleOk(){\n      this.confirmLoading = false\n      this.uploadModalVisible = false\n      this.updateModalVisible = false\n    },\n    async getTableData(){\n      let res = await reqEvent({page_num:1,page_size:10,type: this.type})\n      this.data = res.result.events\n      this.total = res.result.count\n      this.page_num = res.result.page_num\n      this.page_size = res.result.page_size\n    },\n    async submitForm(){\n      this.confirmLoading = true\n      let res = await updateEvent(this.form)\n      if(res.code === 200){\n        this.confirmLoading = false\n        this.updateModalVisible = false\n        this.getTableData()\n        notification[\"success\"]({\n          message: '更新成功',\n        });\n      }\n    },\n    handleChange(info){\n      if (info.file.status !== 'uploading') {\n        console.log(info.file, info.fileList);\n      }\n      if (info.file.status === 'done') {\n        notification[\"success\"]({\n          message: '上传成功',\n        });\n      } else if (info.file.status === 'error') {\n        notification[\"error\"]({\n          message: '上传失败',\n        });\n      }\n    },\n    async batchBind(){\n      if(!this.selectedRowKeys.length){\n        notification[\"error\"]({\n          message: '请选择要分配的事件',\n        });\n        return\n      }\n      this.bindModalVisible = true\n      this.toBindEventName = \"batchBind\"\n      await this.getBindedUserIDList()\n    },\n    async bindUsers(name){\n      this.bindModalVisible = true\n      this.toBindEventName = name\n      await this.getBindedUserIDList()\n    },\n    async getBindedUserIDList(){\n      let res = await bindedUserIDList({event_name: this.toBindEventName})\n      if(res.code === 200){\n        this.userIDList = res.result.bindedUserIDList\n      }\n    },\n    async submitBindForm(){\n      if(!this.toBindEventName || !this.userIDList.length){\n        notification[\"error\"]({\n          message: '关键数据缺失，请重试！',\n        });\n        return\n      }\n      let res\n      let count = 0\n      if(this.toBindEventName !== \"batchBind\"){\n        res = await bindEvent({name:this.toBindEventName, userIDList: this.userIDList})\n        if(res.code === 200){\n          count += 1\n        }\n      }else{\n        for (const row of this.selectedRowKeys) {\n          res = await bindEvent({name:row.name, userIDList: this.userIDList})\n          if(res.code === 200){\n            count += 1\n          }\n        }\n      }\n      notification[\"success\"]({\n        message: '分配成功,' + count + '条' ,\n      });\n      this.closeModal()\n\n    },\n    updateEvent(record){\n      this.updateModalVisible = true\n      this.form = record\n    },\n    deleteEvent(id) {\n      const that = this\n      this.$confirm({\n        title: '确定要删除该事件吗?',\n        okText: '确定',\n        okType: 'danger',\n        cancelText: '取消',\n        async onOk() {\n            let res = await deleteEvent({ id: id })\n            if (res.code === 200) {\n              that.$notification.open({\n                message: '删除成功',\n                duration: 1,\n              });\n              this.getTableData()\n            }\n        },\n        onCancel() {\n          console.log('Cancel');\n        },\n      });\n    },\n    async getUserList(){\n      let res = await reqUserList({page_num:1, page_size:9999})\n      if(res.code === 200){\n        this.userList = res.result.users\n      }\n    }\n  },\n  created(){\n    this.getTableData()\n    this.getUserList()\n  }\n}\n</script>\n<style lang='less' scoped>\n\n.body-eventDetail{\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  background-color: #f0f2f5;\n}\n</style>\n"]}]}