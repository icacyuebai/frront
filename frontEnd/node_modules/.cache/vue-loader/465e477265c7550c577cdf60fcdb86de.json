{"remainingRequest":"/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/movi/Desktop/current/frontEnd/src/layouts/BasicLayout.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/movi/Desktop/current/frontEnd/src/layouts/BasicLayout.vue","mtime":1682047750195},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/babel-loader/lib/index.js","mtime":1669512949620},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1651221196058},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/index.js","mtime":1669512954316}],"contextDependencies":[],"result":["\nimport { triggerWindowResizeEvent } from '@/utils/util'\nimport { mapState, mapActions } from 'vuex'\nimport { mixin, mixinDevice } from '@/utils/mixin'\nimport config from '@/config/defaultSettings'\n\nimport RouteView from './RouteView'\nimport MultiTab from '@/components/MultiTab'\nimport SideMenu from '@/components/Menu/SideMenu'\nimport GlobalHeader from '@/components/GlobalHeader'\nimport SettingDrawer from '@/components/SettingDrawer'\n\nexport default {\n  name: 'BasicLayout',\n  mixins: [mixin, mixinDevice],\n  components: {\n    RouteView,\n    SideMenu,\n    GlobalHeader,\n    SettingDrawer\n  },\n  data () {\n    return {\n      production: config.production,\n      collapsed: false,\n      menus: []\n    }\n  },\n  computed: {\n    ...mapState({\n      // 动态主路由\n      mainMenu: state => state.permission.addRouters\n    }),\n    contentPaddingLeft () {\n      if (!this.fixSidebar || this.isMobile()) {\n        return '0'\n      }\n      if (this.sidebarOpened) {\n        return '256px'\n      }\n      return '80px'\n    }\n  },\n  watch: {\n    sidebarOpened (val) {\n      this.collapsed = !val\n    }\n  },\n  created () {\n    console.log(this.mainMenu)\n    this.menus = this.mainMenu.find(item => item.path === '/').children\n    this.collapsed = !this.sidebarOpened\n  },\n  mounted () {\n    const userAgent = navigator.userAgent\n    if (userAgent.indexOf('Edge') > -1) {\n      this.$nextTick(() => {\n        this.collapsed = !this.collapsed\n        setTimeout(() => {\n          this.collapsed = !this.collapsed\n        }, 16)\n      })\n    }\n  },\n  methods: {\n    ...mapActions(['setSidebar']),\n    toggle () {\n      this.collapsed = !this.collapsed\n      this.setSidebar(!this.collapsed)\n      triggerWindowResizeEvent()\n    },\n    paddingCalc () {\n      let left = ''\n      if (this.sidebarOpened) {\n        left = this.isDesktop() ? '256px' : '80px'\n      } else {\n        left = (this.isMobile() && '0') || ((this.fixSidebar && '80px') || '0')\n      }\n      return left\n    },\n    menuSelect () {\n      if (!this.isDesktop()) {\n        this.collapsed = false\n      }\n    },\n    drawerClose () {\n      this.collapsed = false\n    }\n  }\n}\n",null]}