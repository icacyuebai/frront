{"remainingRequest":"/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/movi/Desktop/current/frontEnd/src/views/event/detail/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/movi/Desktop/current/frontEnd/src/views/event/detail/index.vue","mtime":1682070089093},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/babel-loader/lib/index.js","mtime":1669512949620},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1651221196058},{"path":"/Users/movi/Desktop/current/frontEnd/node_modules/vue-loader/lib/index.js","mtime":1669512954316}],"contextDependencies":[],"result":["\nimport { getEventDetail, updateJson } from '@/api/event'\nimport { reqEventExtraction, deleteEventExtraction, updateEventCount, passEventExtraction } from '@/api/eventExtraction.js'\nimport { mapGetters } from 'vuex'\nimport Modal from 'ant-design-vue/lib/modal/Modal'\nimport { notification } from 'ant-design-vue'\nimport * as echarts from 'echarts'\n\nexport default {\n  name: 'EventDetail',\n  data() {\n    return {\n      event: {\n        url: \"\",\n        name: \"\",\n        introduction: \"\",\n        process: \"\",\n        type: \"\"\n      },\n      type: null,\n      data:null,\n      columns: [\n        {\n          title: 'id',\n          key: 'id',\n          dataIndex: 'id',\n          width: \"100px\"\n        },\n        {\n          title: '公司',\n          dataIndex: 'company',\n          key: 'company',\n          width: '100px',\n          ellipsis: true\n        },\n        {\n          title: '时间',\n          dataIndex: 'date',\n          key: 'date',\n          ellipsis: true\n        },\n        {\n          title: '主题',\n          dataIndex: 'event_name',\n          key: 'event_name',\n          ellipsis: true\n        },\n        {\n          title: '经济损失',\n          dataIndex: 'loss_economic',\n          key: 'loss_economic'\n        },\n        {\n          title: '伤亡人数',\n          dataIndex: 'loss_people',\n          key: 'loss_people'\n        },\n        {\n          title: '地点',\n          dataIndex: 'position',\n          key: 'position'\n        },\n        {\n          title: '事件类别',\n          dataIndex: 'type',\n          key: 'type',\n          width: \"120px\"\n        },\n        {\n          title: '事件类型',\n          dataIndex: 'type_detail',\n          key: 'type_detail',\n          width: \"140px\"\n        },\n        {\n          title: '操作',\n          key: 'action',\n          scopedSlots: { customRender: 'action' },\n          width: \"180px\"\n        }\n      ],\n      event_name: null,\n      // json\n      json: null,\n      toUpdateJsonRecord: null,\n      jsons: [],\n      // 展示json\n      viewJsonModalVisible: false,\n      myChart: null,\n      jsonData: null,\n      nodeForm: null,\n      nodeIndex: null,\n      nodeModalVisible: false,\n      // 分页\n      page_num: 1,\n      page_size: 10,\n      total: 0,\n      // 上传\n      uploadModalVisible: false,\n      confirmLoading: false,\n      file: null,\n      fileList: [],\n      // 更新\n      updateModalVisible: false,\n      form: {\n        event_name: \"\",\n        date: \"\",\n        position: \"\",\n        company: \"\",\n        loss_people: \"\",\n        loss_economic: \"\",\n        type: \"\",\n        type_detail: \"\"\n      },\n    };\n  },\n  computed:{\n    ...mapGetters(['roleType'])\n  },\n  methods: {\n    async handlePageChange(page_num, page_size) {\n      let res = await reqEventExtraction({ page_num: page_num, page_size: page_size })\n      this.data = res.result.event_count\n      this.total = res.result.count\n    },\n    showUploadModal() {\n      this.uploadModalVisible = true\n    },\n    handleOk() {\n      this.confirmLoading = false\n      this.uploadModalVisible = false\n      this.updateModalVisible = false\n    },\n    async pass(id){\n      let res = await passEventExtraction({id:id})\n      if(res.code === 200){\n        notification[\"success\"]({\n          message: '标记成功',\n        });\n        this.getTableData()\n      }\n    },\n    updateEventExtraction(record) {\n      this.updateModalVisible = true\n      this.form = record\n    },\n    closeModal() {\n      this.form = {\n        event_name: \"\",\n        date: \"\",\n        position: \"\",\n        company: \"\",\n        loss_people: \"\",\n        loss_economic: \"\",\n        type: \"\",\n        type_detail: \"\"\n      }\n      this.updateModalVisible = false\n    },\n    async submitUpdateNode(){\n      if(!this.json){\n        return\n      }\n      this.json.dict_ls[this.nodeIndex] = this.nodeForm\n      let res = await updateJson({id: this.toUpdateJsonRecord.id, json: JSON.stringify(this.json)})\n      if(res.code === 200){\n        notification[\"success\"]({\n          message: '更新成功',\n        });\n        this.closeNodeModal()\n      }\n    },\n    async submitForm() {\n      this.confirmLoading = true\n      let res = await updateEventCount(this.form)\n      if (res.code === 200) {\n        this.confirmLoading = false\n        this.updateModalVisible = false\n        this.getTableData()\n        notification[\"success\"]({\n          message: '更新成功',\n        });\n      }\n    },\n    async getTableData() {\n      let res = await reqEventExtraction({ page_num: 1, page_size: 10, type: this.type, event_name: this.event_name })\n      this.data = res.result.event_count\n      this.total = res.result.count\n      this.page_num = res.result.page_num\n      this.page_size = res.result.page_size\n    },\n    handleChange(info) {\n      if (info.file.status !== 'uploading') {\n        console.log(info.file, info.fileList);\n      }\n      if (info.file.status === 'done') {\n        notification[\"success\"]({\n          message: '上传成功',\n        });\n        this.getTableData()\n      } else if (info.file.status === 'error') {\n        notification[\"error\"]({\n          message: '上传失败',\n        });\n      }\n    },\n    async handleEventChange(page_num, page_size) {\n      let res = await reqEventExtraction({ page_num: page_num, page_size: page_size })\n      this.data = res.result.event_count\n      this.total = res.result.count\n    },\n    deleteEventExtr(id) {\n      const that = this\n      this.$confirm({\n        title: 'Are you sure delete this task?',\n        content: 'Some descriptions',\n        okText: 'Yes',\n        okType: 'danger',\n        cancelText: 'No',\n        async onOk() {\n          let res = await deleteEventExtraction({ id: id })\n          if (res.code === 200) {\n            that.$notification.open({\n              message: '删除成功',\n              duration: 1\n            })\n            // this.getTableData()\n            // this.closeDialog()\n            let res = await reqEventExtraction({ page_num: 1, page_size: 10 })\n            that.data = res.result.users\n            that.total = res.result.count\n            that.page_num = res.result.page_num\n            that.page_size = res.result.page_size\n          }\n        },\n        onCancel() {\n          console.log('Cancel')\n        }\n      })\n    },\n    closeNodeModal(){\n      this.nodeModalVisible = false\n      this.nodeForm = null\n      this.nodeIndex = null\n    },\n    initEchart() {\n      if(!this.myChart){\n        let dom = document.getElementById(\"echarts\");\n        this.myChart = echarts.init(dom);\n      }\n      var option;\n      option = {\n        tooltip: {\n          formatter: function(params) {\n            let data = params.data\n            let html = '<div style=\"width:280px;height:180px;background:#5370c6;border:1px solid rgba(7,166,255,0.7)\">'\n              +'<div style=\"width:100%;min-height:22px;line-height:22px;border-bottom:2px solid rgba(7,166,255,0.7);padding:0 20px\">'\n              +'<span style=\"color:#fff;font-size:14px;word-wrap:break-word;white-space:normal;\">'+params.name+'</span>'+'</div>'\n              +'<div style=\"padding:20px\">'\n            for(let key in data){\n              if([\"name\", \"x\", \"y\"].indexOf(key) === -1){\n                html+=`<p style=\"color:#fff;font-size:12px;\">\n                        ${key}: ${data[key]}</span>\n                       </p>`\n              }\n            }\n            html += '</div>'+'</div>';\n            return html;\n          }\n        },\n        animationDurationUpdate: 1500,\n        animationEasingUpdate: \"quinticInOut\",\n        series: [\n          {\n            type: \"graph\",\n            layout: \"none\",\n            symbolSize: 50,\n            roam: true,\n            label: {\n              formatter: '{b}',\n              show: true,\n            },\n            edgeSymbol: [\"circle\", \"arrow\"],\n            edgeSymbolSize: [4, 10],\n            edgeLabel: {\n              fontSize: 20,\n            },\n            data: this.json.dict_ls,\n            links: this.json.links,\n            lineStyle: {\n              opacity: 0.9,\n              width: 2,\n              curveness: 0,\n            },\n          },\n        ],\n      };\n      option && this.myChart.setOption(option);\n      const that = this\n      this.myChart.on('click', function (params) {\n        let data = params.data\n        // 如果除了name,x,y外无其他的key，则不弹窗\n        if(params.data && Object.keys(data).length>3){\n          that.nodeModalVisible = true\n          that.nodeForm = data\n          that.nodeIndex = params.dataIndex\n        }\n      });\n    },\n  },\n  async created(){\n    if(this.$route.query && this.$route.query.name){\n      this.event_name = this.$route.query.name\n      let res = await getEventDetail({name: this.event_name})\n      if(res.code === 200){\n        this.event = res.result.event;\n        if(this.event.json){\n          this.json = JSON.parse(this.event.json)\n          this.toUpdateJsonRecord = this.event\n          const that = this\n          this.$nextTick(()=>{\n            that.initEchart()\n          })\n        }\n      }\n      await this.getTableData()\n    }\n  }\n}\n",null]}